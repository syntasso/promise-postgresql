#!/usr/bin/env sh

set -eux

if [ $KRATIX_WORKFLOW_TYPE == "promise" ]; then
  cp /tmp/transfer/dependencies/* /kratix/output/
else
  base_instance="/tmp/transfer/resources/minimal-postgres-manifest.yaml"

  # Read current values from the provided resource request
  name="$(yq eval '.metadata.name' /kratix/input/object.yaml)"
  namespace="$(yq eval '.spec.namespace // "default"' /kratix/input/object.yaml)"

  env_type="$(yq eval '.spec.env // "dev"' /kratix/input/object.yaml)"
  team="$(yq eval '.spec.teamId // "acid"' /kratix/input/object.yaml)"
  dbname="$(yq eval '.spec.dbName // "postgres"' /kratix/input/object.yaml)"
  backup="$(yq eval '.spec.backupEnabled // false' /kratix/input/object.yaml)"

  instance_name="${team}-${name}-postgresql"

  size="1Gi"
  instances="${MINIMUM_REPLICAS:-1}"
  version="${PG_VERSION:-16}"

  if [ $env_type = "prod" ]; then
    size="10Gi"
    instances=$((instances + 2)) # Add 2 replicas for production
  fi


  # Replace defaults with user provided values
  cat ${base_instance} |
    yq eval "
      .metadata.namespace = \"${namespace}\" |
      .metadata.name = \"${instance_name}\" |
      .spec.enableLogicalBackup = ${backup} |
      .spec.teamId = \"${team}\" |
      .spec.volume.size = \"${size}\" |
      .spec.numberOfInstances = ${instances} |
      .spec.users = {\"${team}\": [\"superuser\", \"createdb\"]} |
      .spec.databases = {\"$dbname\": \"$team\"} |
      .spec.postgresql.version =  ${version} |
      del(.spec.preparedDatabases)
    " - > /kratix/output/postgres-instance.yaml

  export message="${size} instance v${version} deployed successfully"
  if ${backup}; then
    message="${message} with backups enabled"
  else
    message="${message} without backups"
  fi

  cat > /kratix/metadata/status.yaml <<EOF
message: "$message"
connectionDetails:
  host: '${instance_name}.${namespace}.svc.cluster.local'
  credentials: 'Username and Password available in Secret: "${namespace}/postgres.${instance_name}.credentials.postgresql.acid.zalan.do"'
instanceName: "${instance_name}"
pgVersion: ${version}
EOF

fi
